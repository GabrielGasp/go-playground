// Code generated by MockGen. DO NOT EDIT.
// Source: repository/tx.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	repository "sql-tx-abstraction/repository"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionProvider is a mock of TransactionProvider interface.
type MockTransactionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionProviderMockRecorder
}

// MockTransactionProviderMockRecorder is the mock recorder for MockTransactionProvider.
type MockTransactionProviderMockRecorder struct {
	mock *MockTransactionProvider
}

// NewMockTransactionProvider creates a new mock instance.
func NewMockTransactionProvider(ctrl *gomock.Controller) *MockTransactionProvider {
	mock := &MockTransactionProvider{ctrl: ctrl}
	mock.recorder = &MockTransactionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionProvider) EXPECT() *MockTransactionProviderMockRecorder {
	return m.recorder
}

// RunInTx mocks base method.
func (m *MockTransactionProvider) RunInTx(fn repository.TxFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTx", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTx indicates an expected call of RunInTx.
func (mr *MockTransactionProviderMockRecorder) RunInTx(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTx", reflect.TypeOf((*MockTransactionProvider)(nil).RunInTx), fn)
}
