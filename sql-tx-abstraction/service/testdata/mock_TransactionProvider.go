// Code generated by mockery v2.46.0. DO NOT EDIT.

package testdata

import (
	repository "sql-tx-abstraction/repository"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactionProvider is an autogenerated mock type for the TransactionProvider type
type MockTransactionProvider struct {
	mock.Mock
}

type MockTransactionProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionProvider) EXPECT() *MockTransactionProvider_Expecter {
	return &MockTransactionProvider_Expecter{mock: &_m.Mock}
}

// RunInTx provides a mock function with given fields: fn
func (_m *MockTransactionProvider) RunInTx(fn repository.TxFn) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RunInTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repository.TxFn) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionProvider_RunInTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunInTx'
type MockTransactionProvider_RunInTx_Call struct {
	*mock.Call
}

// RunInTx is a helper method to define mock.On call
//   - fn repository.TxFn
func (_e *MockTransactionProvider_Expecter) RunInTx(fn interface{}) *MockTransactionProvider_RunInTx_Call {
	return &MockTransactionProvider_RunInTx_Call{Call: _e.mock.On("RunInTx", fn)}
}

func (_c *MockTransactionProvider_RunInTx_Call) Run(run func(fn repository.TxFn)) *MockTransactionProvider_RunInTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.TxFn))
	})
	return _c
}

func (_c *MockTransactionProvider_RunInTx_Call) Return(_a0 error) *MockTransactionProvider_RunInTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionProvider_RunInTx_Call) RunAndReturn(run func(repository.TxFn) error) *MockTransactionProvider_RunInTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionProvider creates a new instance of MockTransactionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionProvider {
	mock := &MockTransactionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
