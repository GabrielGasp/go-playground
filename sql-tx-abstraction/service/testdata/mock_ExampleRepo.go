// Code generated by mockery v2.46.0. DO NOT EDIT.

package testdata

import mock "github.com/stretchr/testify/mock"

// MockExampleRepo is an autogenerated mock type for the ExampleRepo type
type MockExampleRepo struct {
	mock.Mock
}

type MockExampleRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExampleRepo) EXPECT() *MockExampleRepo_Expecter {
	return &MockExampleRepo_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields:
func (_m *MockExampleRepo) Do() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExampleRepo_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockExampleRepo_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
func (_e *MockExampleRepo_Expecter) Do() *MockExampleRepo_Do_Call {
	return &MockExampleRepo_Do_Call{Call: _e.mock.On("Do")}
}

func (_c *MockExampleRepo_Do_Call) Run(run func()) *MockExampleRepo_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExampleRepo_Do_Call) Return(_a0 error) *MockExampleRepo_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExampleRepo_Do_Call) RunAndReturn(run func() error) *MockExampleRepo_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExampleRepo creates a new instance of MockExampleRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExampleRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExampleRepo {
	mock := &MockExampleRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
