// Code generated by mockery v2.43.2. DO NOT EDIT.

package io

import mock "github.com/stretchr/testify/mock"

// MockStringWriter is an autogenerated mock type for the StringWriter type
type MockStringWriter struct {
	mock.Mock
}

type MockStringWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStringWriter) EXPECT() *MockStringWriter_Expecter {
	return &MockStringWriter_Expecter{mock: &_m.Mock}
}

// WriteString provides a mock function with given fields: s
func (_m *MockStringWriter) WriteString(s string) (int, error) {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for WriteString")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStringWriter_WriteString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteString'
type MockStringWriter_WriteString_Call struct {
	*mock.Call
}

// WriteString is a helper method to define mock.On call
//   - s string
func (_e *MockStringWriter_Expecter) WriteString(s interface{}) *MockStringWriter_WriteString_Call {
	return &MockStringWriter_WriteString_Call{Call: _e.mock.On("WriteString", s)}
}

func (_c *MockStringWriter_WriteString_Call) Run(run func(s string)) *MockStringWriter_WriteString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStringWriter_WriteString_Call) Return(n int, err error) *MockStringWriter_WriteString_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStringWriter_WriteString_Call) RunAndReturn(run func(string) (int, error)) *MockStringWriter_WriteString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStringWriter creates a new instance of MockStringWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStringWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStringWriter {
	mock := &MockStringWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
