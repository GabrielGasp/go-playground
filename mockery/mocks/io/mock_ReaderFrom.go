// Code generated by mockery v2.43.2. DO NOT EDIT.

package io

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockReaderFrom is an autogenerated mock type for the ReaderFrom type
type MockReaderFrom struct {
	mock.Mock
}

type MockReaderFrom_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReaderFrom) EXPECT() *MockReaderFrom_Expecter {
	return &MockReaderFrom_Expecter{mock: &_m.Mock}
}

// ReadFrom provides a mock function with given fields: r
func (_m *MockReaderFrom) ReadFrom(r io.Reader) (int64, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrom")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (int64, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReaderFrom_ReadFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFrom'
type MockReaderFrom_ReadFrom_Call struct {
	*mock.Call
}

// ReadFrom is a helper method to define mock.On call
//   - r io.Reader
func (_e *MockReaderFrom_Expecter) ReadFrom(r interface{}) *MockReaderFrom_ReadFrom_Call {
	return &MockReaderFrom_ReadFrom_Call{Call: _e.mock.On("ReadFrom", r)}
}

func (_c *MockReaderFrom_ReadFrom_Call) Run(run func(r io.Reader)) *MockReaderFrom_ReadFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockReaderFrom_ReadFrom_Call) Return(n int64, err error) *MockReaderFrom_ReadFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockReaderFrom_ReadFrom_Call) RunAndReturn(run func(io.Reader) (int64, error)) *MockReaderFrom_ReadFrom_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReaderFrom creates a new instance of MockReaderFrom. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReaderFrom(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReaderFrom {
	mock := &MockReaderFrom{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
